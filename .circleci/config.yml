version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    parallelism: 4 # run four instances of this job in parallel
    working_directory: ~/profiler # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/ruby:2.5-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          DB: postgres
          DB_HOST: localhost
          DB_USERNAME: postgres
          CIRCLE_TEST_REPORTS: /tmp/test-results
          CIRCLE_ARTIFACTS: /tmp/test-artifacts
          BUNDLE_JOBS: 4
          BUNDLE_RETRY: 3
          BUNDLE_PATH: ~/profiler/vendor/bundle
          BUNDLE_GEMFILE: ~/profiler/Gemfile
          COVERAGE_ENABLED: true
          COVERALLS_REPO_TOKEN: rHrAGDxiIZFd9UaAOTdg9Wrn5AH95osNT
      - image: circleci/postgres:10-alpine # database image
        environment: # environment variables for database
          POSTGRES_USER: postgres
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - profiler-bundle-v2-{{ .Branch }}-{{ checksum "Gemfile" }}
            - profiler-bundle-v2-{{ checksum "Gemfile" }}

      # Install gem dependencies
      - run:
          name: Bundle Install
          command: |
            bundle check --path=~/profiler/vendor/bundle || bundle install
      # Store bundle cache
      - save_cache:
          key: profiler-bundle-v2-{{ .Branch }}-{{ checksum "Gemfile" }}
          paths:
            - ~/profiler/vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Run generator of test application
          command: bundle exec rake test_app

      - run:
          name: Run rspec
          command: bundle exec rspec

      - store_artifacts:
          path: /tmp/test-artifacts
          destination: test-artifacts

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results
          